"""Creaci√≥n de nuevas tablas para administrar las apps

Revision ID: 4fc261c4f603
Revises: 
Create Date: 2025-09-09 10:29:09.263164

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4fc261c4f603'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('apps', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_apps_key'), ['key'], unique=True)

    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('app_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['apps.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('app_id', 'code', name='uq_permissions_app_code')
    )
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_permissions_app_id'), ['app_id'], unique=False)

    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('perm_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['perm_id'], ['permissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'perm_id')
    )
    op.create_table('user_app_perms',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('app_id', sa.Integer(), nullable=False),
    sa.Column('perm_id', sa.Integer(), nullable=False),
    sa.Column('allow', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['app_id'], ['apps.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['perm_id'], ['permissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'app_id', 'perm_id')
    )
    with op.batch_alter_table('user_app_perms', schema=None) as batch_op:
        batch_op.create_index('ix_user_app_perms_user_app', ['user_id', 'app_id'], unique=False)

    op.create_table('user_app_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('app_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['app_id'], ['apps.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'app_id', 'role_id')
    )
    with op.batch_alter_table('user_app_roles', schema=None) as batch_op:
        batch_op.create_index('ix_user_app_roles_user_app', ['user_id', 'app_id'], unique=False)

    op.create_table('survey_dispatches',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('campaign_code', sa.Text(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=True),
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('sent_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('message_id', sa.Text(), nullable=True),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('error', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['request_id'], ['requests.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('campaign_code', 'user_id', name='uq_survey_dispatches_campaign_user')
    )
    with op.batch_alter_table('appointments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_appointments_coordinator_status'))

    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.alter_column('payload_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('availability_windows', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_availability_window'), type_='unique')

    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_notifications_user'))
        batch_op.drop_index(batch_op.f('idx_notifications_user_created'))
        batch_op.drop_index(batch_op.f('idx_notifications_user_unread'))

    with op.batch_alter_table('requests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_requests_program'))
        batch_op.drop_index(batch_op.f('idx_requests_status'))
        batch_op.drop_index(batch_op.f('uq_active_request_per_student'), postgresql_where="(status = 'PENDING'::request_status_enum)")

    with op.batch_alter_table('time_slots', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_time_slots_booked'))
        batch_op.drop_index(batch_op.f('idx_time_slots_coord_day'))
        batch_op.drop_constraint(batch_op.f('uq_time_slot'), type_='unique')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('uq_users_username'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('uq_users_username'), ['username'], unique=True)

    with op.batch_alter_table('time_slots', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_time_slot'), ['coordinator_id', 'day', 'start_time'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_time_slots_coord_day'), ['coordinator_id', 'day', 'start_time'], unique=False)
        batch_op.create_index(batch_op.f('idx_time_slots_booked'), ['is_booked'], unique=False)

    with op.batch_alter_table('requests', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('uq_active_request_per_student'), ['student_id'], unique=True, postgresql_where="(status = 'PENDING'::request_status_enum)")
        batch_op.create_index(batch_op.f('idx_requests_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_requests_program'), ['program_id'], unique=False)

    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_notifications_user_unread'), ['user_id', 'is_read', sa.literal_column('created_at DESC')], unique=False)
        batch_op.create_index(batch_op.f('idx_notifications_user_created'), ['user_id', sa.literal_column('created_at DESC')], unique=False)
        batch_op.create_index(batch_op.f('idx_notifications_user'), ['user_id'], unique=False)

    with op.batch_alter_table('availability_windows', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_availability_window'), ['coordinator_id', 'day', 'start_time', 'end_time'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.alter_column('payload_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('appointments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_appointments_coordinator_status'), ['coordinator_id', 'status'], unique=False)

    op.drop_table('survey_dispatches')
    with op.batch_alter_table('user_app_roles', schema=None) as batch_op:
        batch_op.drop_index('ix_user_app_roles_user_app')

    op.drop_table('user_app_roles')
    with op.batch_alter_table('user_app_perms', schema=None) as batch_op:
        batch_op.drop_index('ix_user_app_perms_user_app')

    op.drop_table('user_app_perms')
    op.drop_table('role_permissions')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permissions_app_id'))

    op.drop_table('permissions')
    with op.batch_alter_table('apps', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_apps_key'))

    op.drop_table('apps')
    # ### end Alembic commands ###
